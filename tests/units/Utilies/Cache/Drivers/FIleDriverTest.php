<?php

namespace units\Utilies\Cache\Drivers;

use GhaniniaIR\Interactive\Utilies\Cache\Drivers\FileDriver;
use GhaniniaIR\Tests\TestCase;

class FIleDriverTest extends TestCase
{
    protected $fileName ;
    protected $fileDriver ;
    protected $fileTempPath ;

    protected function setUp(): void
    {

        parent::setUp(); // TODO: Change the autogenerated stub

        $this->fileDriver = new class extends FileDriver {

            public function configTTL(){
                return parent::configTTL();
            }

            public function configExtension(){
                return parent::configExtension();
            }

            public function configCacheDir(){
                return parent::configCacheDir();
            }

            public function info(string $path){
                return parent::info($path);
            }

            public function isExpired(string $path){
                return parent::isExpired($path) ;
            }
        };

        $this->fileName = "1qwgZVXa5151asga" ;
        $this->fileTempBasePath = __DIR__."/stubs/cache";
        $this->fileTempPath = $this->fileTempBasePath."/".$this->fileName.".txt" ;
    }

    /** @test */
    public function getFileInformation()
    {
        config()->set("interactive.cache.drivers.file.ttl" , 250);
        $this->assertEquals($this->fileDriver->configTTL() , 250);
    }

    /** @test */
    public function getConfigExtension()
    {
        config()->set("interactive.driver.file.extension" , "pdf");
        $this->assertEquals($this->fileDriver->configExtension() , "pdf");
    }

    /** @test */
    public function getConfigCacheDir()
    {
        config()->set("interactive.driver.file.cache_dir" , "/");
        $this->assertEquals($this->fileDriver->configCacheDir() , "/");
    }

    /** @test */
    public function getFileInfo()
    {
        config()->set("interactive.cache.drivers.file.ttl" , 50);
        $result = $this->fileDriver->info($this->fileTempPath);
//        $this->assertSame($result->filectime , 1660507421);
//        $this->assertSame($result->expiretime , 1660507471);
//        $this->assertSame($result->filemtime , 1660495215);
        $this->assertSame($result->basename , "1qwgZVXa5151asga.txt");
        $this->assertSame($result->mime , "application/x-empty");
    }

    /** @test */
    public function ifFileExpired()
    {
        config()->set("interactive.cache.drivers.file.ttl" , 0);
        $result = $this->fileDriver->isExpired($this->fileTempPath) ;
        $this->assertTrue($result);
    }

    /** @test */
    public function checkFoundFile()
    {
        config()->set("interactive.driver.file.cache_dir" , $this->fileTempBasePath );

        $result = $this->fileDriver->search($this->fileName) ;

        $this->assertEquals($result , $this->fileTempPath);
    }

    /** @test */
    public function checkNotFoundedFile()
    {
        config()->set("interactive.driver.file.cache_dir" , $this->fileTempBasePath );

        $result = $this->fileDriver->search("ASgasgasgwqtqwtq") ;

        $this->assertEquals($result , false);
    }
}